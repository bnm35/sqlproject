use Hotel
--Display the customers who have not make any reservation since the beginning of 2023. 
--The result should include first name, last name, email address, and contact number.
select c.customer_id,c.first_name, c.last_name, c.email, c.contact_number
from customers as c
left join booking as b on c.customer_id = b.customer_id 
and b.booking_date >= '2023-01-01'
where b.booking_id is null;

--Display the monthly revenue for the year 2023 and sort the results in descending order by monthly revenue
select 
year(b.booking_date) as year, 
month(b.booking_date) as month, 
sum(p.total_amount) as monthly_revenue
from payment p
join booking b on p.booking_id = b.booking_id
where year(booking_date) = 2023
group by year(booking_date), month(booking_date)
order by monthly_revenue desc;

--Display all customers have make more than 3 reservations in the year of 2023.
select c.customer_id, c.first_name, c.last_name, c.email, c.contact_number, 
count(b.booking_id) as total_reservations
from customers as c
join booking as b on c.customer_id = b.customer_id
where year(b.booking_date) = 2023
group by c.customer_id, c.first_name, c.last_name, c.email, c.contact_number
having count(b.booking_id) > 3;

--Display the average rating and total number of reviews for each room type at the Kuala Lumpur branch.
select r.room_type, 
avg(rv.rating) as average_rating, 
count(rv.review_id) as total_reviews
FROM rooms as r
join reviews as rv on r.room_no = rv.room_no
join branches b on r.branch_id = b.branch_id
where b.branch_name = 'Yen Hotel'
group by r.room_type;

--Display the total revenue generated by each branch for the year 2023.
select b.branch_name, sum(p.total_amount) as total_revenue
from branches b
join rooms r on b.branch_id = r.branch_id
join booking bk on r.room_no = bk.room_no
join payment p on bk.booking_id = p.booking_id
where year(bk.booking_date) = 2023
group by b.branch_name
order by total_revenue desc;

--Display the names of customers and the total amount they spent in the year of 2023
select concat(c.first_name, ' ', c.last_name) as customer_name, 
sum(p.total_amount) as total_spent
from customers as c
join booking as b on c.customer_id = b.customer_id
join payment as p on b.booking_id = p.booking_id
where year(b.booking_date) = 2023
group by c.customer_id, c.first_name,c.last_name
order by total_spent desc;

--Display the average and total spending by gender for the year 2023.
select c.gender, 
sum(p.total_amount) as total_spent, 
avg(p.total_amount) as average_spent
from customers as c
join booking as b on c.customer_id = b.customer_id
join payment as p on b.booking_id = p.booking_id
where year(b.booking_date) = 2023
group by c.gender;

--Display the branch id, address, manager’s name, and the total number of rooms for each branch.
select b.branch_id, b.location as address, 
concat(m.first_name, ' ', m.last_name) as manager_name,
count(r.room_no) as total_rooms
from branches as b
join rooms as r on b.branch_id = r.branch_id
join managers as m on b.branch_id = m.branch_id
group by b.branch_id, b.location, m.first_name, m.last_name;

--Display the customer with highest number of reservations and show their average amount spent for the year 2023.
select c.customer_id, 
concat(c.first_name, ' ', c.last_name) as customer_name,
count(b.booking_id) as total_reservations,
avg(p.total_amount) as average_amount_spent
from customers as  c
join booking as b on c.customer_id = b.customer_id
join payment as p on b.booking_id = p.booking_id
where year(b.booking_date) = 2023
group by c.customer_id, c.first_name, c.last_name

--Display the customer who have stayed more than one branch in 2023.
select c.customer_id,
concat(c.first_name,' ',c.last_name) as customer_name,
count(distinct b.branch_id) as total_visit
from customers as c
join booking as bo on bo.customer_id = c.customer_id
join branches as b on b.branch_id = bo.branch_id
where year(bo.booking_date) = 2023
group by c.customer_id,c.first_name,c.last_name
having count(distinct b.branch_id) > 1
